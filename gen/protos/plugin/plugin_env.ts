/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/plugin/plugin_env.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class PluginEnv extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            append?: string[];
            prepend?: string[];
        } & (({
            set?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("append" in data && data.append != undefined) {
                    this.append = data.append;
                }
                if ("prepend" in data && data.prepend != undefined) {
                    this.prepend = data.prepend;
                }
                if ("set" in data && data.set != undefined) {
                    this.set = data.set;
                }
            }
        }
        get append() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set append(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get prepend() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set prepend(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get set() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set set(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_set() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _set() {
            const cases: {
                [index: number]: "none" | "set";
            } = {
                0: "none",
                3: "set"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            append?: string[];
            prepend?: string[];
            set?: string;
        }): PluginEnv {
            const message = new PluginEnv({});
            if (data.append != null) {
                message.append = data.append;
            }
            if (data.prepend != null) {
                message.prepend = data.prepend;
            }
            if (data.set != null) {
                message.set = data.set;
            }
            return message;
        }
        toObject() {
            const data: {
                append?: string[];
                prepend?: string[];
                set?: string;
            } = {};
            if (this.append != null) {
                data.append = this.append;
            }
            if (this.prepend != null) {
                data.prepend = this.prepend;
            }
            if (this.set != null) {
                data.set = this.set;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.append.length)
                writer.writeRepeatedString(1, this.append);
            if (this.prepend.length)
                writer.writeRepeatedString(2, this.prepend);
            if (this.has_set)
                writer.writeString(3, this.set);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PluginEnv {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PluginEnv();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.set = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PluginEnv {
            return PluginEnv.deserialize(bytes);
        }
    }
}
