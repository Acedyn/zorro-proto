/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/plugin/plugin.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./..\\scheduling\\processor";
import * as dependency_2 from "./..\\filesystem\\fs";
import * as dependency_3 from "./plugin_env";
import * as dependency_4 from "./plugin_tools";
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class Plugin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            version?: string;
            label?: string;
            path?: string;
            require?: string[];
            env?: Map<string, dependency_3.zorro.PluginEnv>;
            tools?: dependency_4.zorro.PluginTools;
            processors?: dependency_1.zorro.Processor[];
            repository?: dependency_2.zorro.FileSystemSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("require" in data && data.require != undefined) {
                    this.require = data.require;
                }
                if ("env" in data && data.env != undefined) {
                    this.env = data.env;
                }
                if ("tools" in data && data.tools != undefined) {
                    this.tools = data.tools;
                }
                if ("processors" in data && data.processors != undefined) {
                    this.processors = data.processors;
                }
                if ("repository" in data && data.repository != undefined) {
                    this.repository = data.repository;
                }
            }
            if (!this.env)
                this.env = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get require() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set require(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get env() {
            return pb_1.Message.getField(this, 6) as any as Map<string, dependency_3.zorro.PluginEnv>;
        }
        set env(value: Map<string, dependency_3.zorro.PluginEnv>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get tools() {
            return pb_1.Message.getWrapperField(this, dependency_4.zorro.PluginTools, 7) as dependency_4.zorro.PluginTools;
        }
        set tools(value: dependency_4.zorro.PluginTools) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_tools() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get processors() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.zorro.Processor, 8) as dependency_1.zorro.Processor[];
        }
        set processors(value: dependency_1.zorro.Processor[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get repository() {
            return pb_1.Message.getWrapperField(this, dependency_2.zorro.FileSystemSettings, 9) as dependency_2.zorro.FileSystemSettings;
        }
        set repository(value: dependency_2.zorro.FileSystemSettings) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_repository() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            name?: string;
            version?: string;
            label?: string;
            path?: string;
            require?: string[];
            env?: {
                [key: string]: ReturnType<typeof dependency_3.zorro.PluginEnv.prototype.toObject>;
            };
            tools?: ReturnType<typeof dependency_4.zorro.PluginTools.prototype.toObject>;
            processors?: ReturnType<typeof dependency_1.zorro.Processor.prototype.toObject>[];
            repository?: ReturnType<typeof dependency_2.zorro.FileSystemSettings.prototype.toObject>;
        }): Plugin {
            const message = new Plugin({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.require != null) {
                message.require = data.require;
            }
            if (typeof data.env == "object") {
                message.env = new Map(Object.entries(data.env).map(([key, value]) => [key, dependency_3.zorro.PluginEnv.fromObject(value)]));
            }
            if (data.tools != null) {
                message.tools = dependency_4.zorro.PluginTools.fromObject(data.tools);
            }
            if (data.processors != null) {
                message.processors = data.processors.map(item => dependency_1.zorro.Processor.fromObject(item));
            }
            if (data.repository != null) {
                message.repository = dependency_2.zorro.FileSystemSettings.fromObject(data.repository);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                version?: string;
                label?: string;
                path?: string;
                require?: string[];
                env?: {
                    [key: string]: ReturnType<typeof dependency_3.zorro.PluginEnv.prototype.toObject>;
                };
                tools?: ReturnType<typeof dependency_4.zorro.PluginTools.prototype.toObject>;
                processors?: ReturnType<typeof dependency_1.zorro.Processor.prototype.toObject>[];
                repository?: ReturnType<typeof dependency_2.zorro.FileSystemSettings.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.require != null) {
                data.require = this.require;
            }
            if (this.env != null) {
                data.env = (Object.fromEntries)((Array.from)(this.env).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.tools != null) {
                data.tools = this.tools.toObject();
            }
            if (this.processors != null) {
                data.processors = this.processors.map((item: dependency_1.zorro.Processor) => item.toObject());
            }
            if (this.repository != null) {
                data.repository = this.repository.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.version.length)
                writer.writeString(2, this.version);
            if (this.label.length)
                writer.writeString(3, this.label);
            if (this.path.length)
                writer.writeString(4, this.path);
            if (this.require.length)
                writer.writeRepeatedString(5, this.require);
            for (const [key, value] of this.env) {
                writer.writeMessage(6, this.env, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.has_tools)
                writer.writeMessage(7, this.tools, () => this.tools.serialize(writer));
            if (this.processors.length)
                writer.writeRepeatedMessage(8, this.processors, (item: dependency_1.zorro.Processor) => item.serialize(writer));
            if (this.has_repository)
                writer.writeMessage(9, this.repository, () => this.repository.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Plugin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Plugin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        message.label = reader.readString();
                        break;
                    case 4:
                        message.path = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.env as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_3.zorro.PluginEnv.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 7:
                        reader.readMessage(message.tools, () => message.tools = dependency_4.zorro.PluginTools.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.processors, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.zorro.Processor.deserialize(reader), dependency_1.zorro.Processor));
                        break;
                    case 9:
                        reader.readMessage(message.repository, () => message.repository = dependency_2.zorro.FileSystemSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Plugin {
            return Plugin.deserialize(bytes);
        }
    }
}
