/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/tools/command.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./tool";
import * as dependency_2 from "./..\\scheduling\\processor_query";
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class Command extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            base?: dependency_1.zorro.ToolBase;
            processor_query?: dependency_2.zorro.ProcessorQuery;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("base" in data && data.base != undefined) {
                    this.base = data.base;
                }
                if ("processor_query" in data && data.processor_query != undefined) {
                    this.processor_query = data.processor_query;
                }
            }
        }
        get base() {
            return pb_1.Message.getWrapperField(this, dependency_1.zorro.ToolBase, 1) as dependency_1.zorro.ToolBase;
        }
        set base(value: dependency_1.zorro.ToolBase) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_base() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get processor_query() {
            return pb_1.Message.getWrapperField(this, dependency_2.zorro.ProcessorQuery, 2) as dependency_2.zorro.ProcessorQuery;
        }
        set processor_query(value: dependency_2.zorro.ProcessorQuery) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_processor_query() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            base?: ReturnType<typeof dependency_1.zorro.ToolBase.prototype.toObject>;
            processor_query?: ReturnType<typeof dependency_2.zorro.ProcessorQuery.prototype.toObject>;
        }): Command {
            const message = new Command({});
            if (data.base != null) {
                message.base = dependency_1.zorro.ToolBase.fromObject(data.base);
            }
            if (data.processor_query != null) {
                message.processor_query = dependency_2.zorro.ProcessorQuery.fromObject(data.processor_query);
            }
            return message;
        }
        toObject() {
            const data: {
                base?: ReturnType<typeof dependency_1.zorro.ToolBase.prototype.toObject>;
                processor_query?: ReturnType<typeof dependency_2.zorro.ProcessorQuery.prototype.toObject>;
            } = {};
            if (this.base != null) {
                data.base = this.base.toObject();
            }
            if (this.processor_query != null) {
                data.processor_query = this.processor_query.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_base)
                writer.writeMessage(1, this.base, () => this.base.serialize(writer));
            if (this.has_processor_query)
                writer.writeMessage(2, this.processor_query, () => this.processor_query.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.base, () => message.base = dependency_1.zorro.ToolBase.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.processor_query, () => message.processor_query = dependency_2.zorro.ProcessorQuery.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Command {
            return Command.deserialize(bytes);
        }
    }
}
