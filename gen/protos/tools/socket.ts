/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/tools/socket.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class SocketFields extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fields?: Map<string, Socket>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
            if (!this.fields)
                this.fields = new Map();
        }
        get fields() {
            return pb_1.Message.getField(this, 1) as any as Map<string, Socket>;
        }
        set fields(value: Map<string, Socket>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            fields?: {
                [key: string]: ReturnType<typeof Socket.prototype.toObject>;
            };
        }): SocketFields {
            const message = new SocketFields({});
            if (typeof data.fields == "object") {
                message.fields = new Map(Object.entries(data.fields).map(([key, value]) => [key, Socket.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                fields?: {
                    [key: string]: ReturnType<typeof Socket.prototype.toObject>;
                };
            } = {};
            if (this.fields != null) {
                data.fields = (Object.fromEntries)((Array.from)(this.fields).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.fields) {
                writer.writeMessage(1, this.fields, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SocketFields {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocketFields();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fields as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Socket.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SocketFields {
            return SocketFields.deserialize(bytes);
        }
    }
    export class Socket extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4]];
        constructor(data?: any[] | ({
            kind?: string;
            json?: Uint8Array;
        } & (({
            link?: string;
            raw?: never;
            fields?: never;
        } | {
            link?: never;
            raw?: Uint8Array;
            fields?: never;
        } | {
            link?: never;
            raw?: never;
            fields?: SocketFields;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("link" in data && data.link != undefined) {
                    this.link = data.link;
                }
                if ("raw" in data && data.raw != undefined) {
                    this.raw = data.raw;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("json" in data && data.json != undefined) {
                    this.json = data.json;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set kind(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get link() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set link(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_link() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get raw() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set raw(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_raw() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fields() {
            return pb_1.Message.getWrapperField(this, SocketFields, 4) as SocketFields;
        }
        set fields(value: SocketFields) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_fields() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get json() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set json(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get value() {
            const cases: {
                [index: number]: "none" | "link" | "raw" | "fields";
            } = {
                0: "none",
                2: "link",
                3: "raw",
                4: "fields"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
        }
        static fromObject(data: {
            kind?: string;
            link?: string;
            raw?: Uint8Array;
            fields?: ReturnType<typeof SocketFields.prototype.toObject>;
            json?: Uint8Array;
        }): Socket {
            const message = new Socket({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.link != null) {
                message.link = data.link;
            }
            if (data.raw != null) {
                message.raw = data.raw;
            }
            if (data.fields != null) {
                message.fields = SocketFields.fromObject(data.fields);
            }
            if (data.json != null) {
                message.json = data.json;
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: string;
                link?: string;
                raw?: Uint8Array;
                fields?: ReturnType<typeof SocketFields.prototype.toObject>;
                json?: Uint8Array;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.link != null) {
                data.link = this.link;
            }
            if (this.raw != null) {
                data.raw = this.raw;
            }
            if (this.fields != null) {
                data.fields = this.fields.toObject();
            }
            if (this.json != null) {
                data.json = this.json;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind.length)
                writer.writeString(1, this.kind);
            if (this.has_link)
                writer.writeString(2, this.link);
            if (this.has_raw)
                writer.writeBytes(3, this.raw);
            if (this.has_fields)
                writer.writeMessage(4, this.fields, () => this.fields.serialize(writer));
            if (this.json.length)
                writer.writeBytes(5, this.json);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Socket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Socket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readString();
                        break;
                    case 2:
                        message.link = reader.readString();
                        break;
                    case 3:
                        message.raw = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.fields, () => message.fields = SocketFields.deserialize(reader));
                        break;
                    case 5:
                        message.json = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Socket {
            return Socket.deserialize(bytes);
        }
    }
}
