/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/filesystem/fs.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export enum FileSystemType {
        Os = 0,
        IndexedDb = 1,
        Memory = 2
    }
    export class OsFsSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            directory?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("directory" in data && data.directory != undefined) {
                    this.directory = data.directory;
                }
            }
        }
        get directory() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set directory(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            directory?: string;
        }): OsFsSettings {
            const message = new OsFsSettings({});
            if (data.directory != null) {
                message.directory = data.directory;
            }
            return message;
        }
        toObject() {
            const data: {
                directory?: string;
            } = {};
            if (this.directory != null) {
                data.directory = this.directory;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.directory.length)
                writer.writeString(1, this.directory);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OsFsSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OsFsSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.directory = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OsFsSettings {
            return OsFsSettings.deserialize(bytes);
        }
    }
    export class IndexedDbFsSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): IndexedDbFsSettings {
            const message = new IndexedDbFsSettings({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexedDbFsSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexedDbFsSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexedDbFsSettings {
            return IndexedDbFsSettings.deserialize(bytes);
        }
    }
    export class MemoryFsSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): MemoryFsSettings {
            const message = new MemoryFsSettings({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryFsSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryFsSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryFsSettings {
            return MemoryFsSettings.deserialize(bytes);
        }
    }
    export class FileSystemSettings extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            os?: OsFsSettings;
            indexedDb?: never;
            memory?: never;
        } | {
            os?: never;
            indexedDb?: IndexedDbFsSettings;
            memory?: never;
        } | {
            os?: never;
            indexedDb?: never;
            memory?: MemoryFsSettings;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("os" in data && data.os != undefined) {
                    this.os = data.os;
                }
                if ("indexedDb" in data && data.indexedDb != undefined) {
                    this.indexedDb = data.indexedDb;
                }
                if ("memory" in data && data.memory != undefined) {
                    this.memory = data.memory;
                }
            }
        }
        get os() {
            return pb_1.Message.getWrapperField(this, OsFsSettings, 1) as OsFsSettings;
        }
        set os(value: OsFsSettings) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_os() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get indexedDb() {
            return pb_1.Message.getWrapperField(this, IndexedDbFsSettings, 2) as IndexedDbFsSettings;
        }
        set indexedDb(value: IndexedDbFsSettings) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_indexedDb() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get memory() {
            return pb_1.Message.getWrapperField(this, MemoryFsSettings, 3) as MemoryFsSettings;
        }
        set memory(value: MemoryFsSettings) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_memory() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get file_system_settings() {
            const cases: {
                [index: number]: "none" | "os" | "indexedDb" | "memory";
            } = {
                0: "none",
                1: "os",
                2: "indexedDb",
                3: "memory"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            os?: ReturnType<typeof OsFsSettings.prototype.toObject>;
            indexedDb?: ReturnType<typeof IndexedDbFsSettings.prototype.toObject>;
            memory?: ReturnType<typeof MemoryFsSettings.prototype.toObject>;
        }): FileSystemSettings {
            const message = new FileSystemSettings({});
            if (data.os != null) {
                message.os = OsFsSettings.fromObject(data.os);
            }
            if (data.indexedDb != null) {
                message.indexedDb = IndexedDbFsSettings.fromObject(data.indexedDb);
            }
            if (data.memory != null) {
                message.memory = MemoryFsSettings.fromObject(data.memory);
            }
            return message;
        }
        toObject() {
            const data: {
                os?: ReturnType<typeof OsFsSettings.prototype.toObject>;
                indexedDb?: ReturnType<typeof IndexedDbFsSettings.prototype.toObject>;
                memory?: ReturnType<typeof MemoryFsSettings.prototype.toObject>;
            } = {};
            if (this.os != null) {
                data.os = this.os.toObject();
            }
            if (this.indexedDb != null) {
                data.indexedDb = this.indexedDb.toObject();
            }
            if (this.memory != null) {
                data.memory = this.memory.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_os)
                writer.writeMessage(1, this.os, () => this.os.serialize(writer));
            if (this.has_indexedDb)
                writer.writeMessage(2, this.indexedDb, () => this.indexedDb.serialize(writer));
            if (this.has_memory)
                writer.writeMessage(3, this.memory, () => this.memory.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileSystemSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileSystemSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.os, () => message.os = OsFsSettings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.indexedDb, () => message.indexedDb = IndexedDbFsSettings.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.memory, () => message.memory = MemoryFsSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileSystemSettings {
            return FileSystemSettings.deserialize(bytes);
        }
    }
}
