/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/network/rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./..\\..\\google\\protobuf\\duration";
import * as dependency_2 from "./..\\..\\google\\protobuf\\any";
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class Status extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            message?: string;
            details?: dependency_2.google.protobuf.Any[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get details() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.google.protobuf.Any, 3) as dependency_2.google.protobuf.Any[];
        }
        set details(value: dependency_2.google.protobuf.Any[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            code?: number;
            message?: string;
            details?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>[];
        }): Status {
            const message = new Status({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.details != null) {
                message.details = data.details.map(item => dependency_2.google.protobuf.Any.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                message?: string;
                details?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>[];
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.details != null) {
                data.details = this.details.map((item: dependency_2.google.protobuf.Any) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.details.length)
                writer.writeRepeatedMessage(3, this.details, (item: dependency_2.google.protobuf.Any) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.details, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.google.protobuf.Any.deserialize(reader), dependency_2.google.protobuf.Any));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Status {
            return Status.deserialize(bytes);
        }
    }
    export class PacketMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            eom?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("eom" in data && data.eom != undefined) {
                    this.eom = data.eom;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get eom() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set eom(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            eom?: boolean;
        }): PacketMessage {
            const message = new PacketMessage({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.eom != null) {
                message.eom = data.eom;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                eom?: boolean;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.eom != null) {
                data.eom = this.eom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.eom != false)
                writer.writeBool(2, this.eom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.eom = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PacketMessage {
            return PacketMessage.deserialize(bytes);
        }
    }
    export class Stream extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): Stream {
            const message = new Stream({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stream {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stream();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Stream {
            return Stream.deserialize(bytes);
        }
    }
    export class Request extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4]];
        constructor(data?: any[] | ({
            stream?: Stream;
        } & (({
            headers?: RequestHeaders;
            message?: never;
            rst_stream?: never;
        } | {
            headers?: never;
            message?: RequestMessage;
            rst_stream?: never;
        } | {
            headers?: never;
            message?: never;
            rst_stream?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream" in data && data.stream != undefined) {
                    this.stream = data.stream;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("rst_stream" in data && data.rst_stream != undefined) {
                    this.rst_stream = data.rst_stream;
                }
            }
        }
        get stream() {
            return pb_1.Message.getWrapperField(this, Stream, 1) as Stream;
        }
        set stream(value: Stream) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stream() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get headers() {
            return pb_1.Message.getWrapperField(this, RequestHeaders, 2) as RequestHeaders;
        }
        set headers(value: RequestHeaders) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_headers() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get message() {
            return pb_1.Message.getWrapperField(this, RequestMessage, 3) as RequestMessage;
        }
        set message(value: RequestMessage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get rst_stream() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set rst_stream(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_rst_stream() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "headers" | "message" | "rst_stream";
            } = {
                0: "none",
                2: "headers",
                3: "message",
                4: "rst_stream"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
        }
        static fromObject(data: {
            stream?: ReturnType<typeof Stream.prototype.toObject>;
            headers?: ReturnType<typeof RequestHeaders.prototype.toObject>;
            message?: ReturnType<typeof RequestMessage.prototype.toObject>;
            rst_stream?: boolean;
        }): Request {
            const message = new Request({});
            if (data.stream != null) {
                message.stream = Stream.fromObject(data.stream);
            }
            if (data.headers != null) {
                message.headers = RequestHeaders.fromObject(data.headers);
            }
            if (data.message != null) {
                message.message = RequestMessage.fromObject(data.message);
            }
            if (data.rst_stream != null) {
                message.rst_stream = data.rst_stream;
            }
            return message;
        }
        toObject() {
            const data: {
                stream?: ReturnType<typeof Stream.prototype.toObject>;
                headers?: ReturnType<typeof RequestHeaders.prototype.toObject>;
                message?: ReturnType<typeof RequestMessage.prototype.toObject>;
                rst_stream?: boolean;
            } = {};
            if (this.stream != null) {
                data.stream = this.stream.toObject();
            }
            if (this.headers != null) {
                data.headers = this.headers.toObject();
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.rst_stream != null) {
                data.rst_stream = this.rst_stream;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stream)
                writer.writeMessage(1, this.stream, () => this.stream.serialize(writer));
            if (this.has_headers)
                writer.writeMessage(2, this.headers, () => this.headers.serialize(writer));
            if (this.has_message)
                writer.writeMessage(3, this.message, () => this.message.serialize(writer));
            if (this.has_rst_stream)
                writer.writeBool(4, this.rst_stream);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stream, () => message.stream = Stream.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.headers, () => message.headers = RequestHeaders.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.message, () => message.message = RequestMessage.deserialize(reader));
                        break;
                    case 4:
                        message.rst_stream = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Request {
            return Request.deserialize(bytes);
        }
    }
    export class RequestHeaders extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            method?: string;
            metadata?: Metadata;
            timeout?: dependency_1.google.protobuf.Duration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("timeout" in data && data.timeout != undefined) {
                    this.timeout = data.timeout;
                }
            }
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 2) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get timeout() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Duration, 3) as dependency_1.google.protobuf.Duration;
        }
        set timeout(value: dependency_1.google.protobuf.Duration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_timeout() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            method?: string;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            timeout?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
        }): RequestHeaders {
            const message = new RequestHeaders({});
            if (data.method != null) {
                message.method = data.method;
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.timeout != null) {
                message.timeout = dependency_1.google.protobuf.Duration.fromObject(data.timeout);
            }
            return message;
        }
        toObject() {
            const data: {
                method?: string;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
                timeout?: ReturnType<typeof dependency_1.google.protobuf.Duration.prototype.toObject>;
            } = {};
            if (this.method != null) {
                data.method = this.method;
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.timeout != null) {
                data.timeout = this.timeout.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.method.length)
                writer.writeString(1, this.method);
            if (this.has_metadata)
                writer.writeMessage(2, this.metadata, () => this.metadata.serialize(writer));
            if (this.has_timeout)
                writer.writeMessage(3, this.timeout, () => this.timeout.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestHeaders {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestHeaders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.method = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.timeout, () => message.timeout = dependency_1.google.protobuf.Duration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestHeaders {
            return RequestHeaders.deserialize(bytes);
        }
    }
    export class RequestMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            has_message?: boolean;
            packet_message?: PacketMessage;
            eos?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("has_message" in data && data.has_message != undefined) {
                    this.has_message = data.has_message;
                }
                if ("packet_message" in data && data.packet_message != undefined) {
                    this.packet_message = data.packet_message;
                }
                if ("eos" in data && data.eos != undefined) {
                    this.eos = data.eos;
                }
            }
        }
        get has_message() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set has_message(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get packet_message() {
            return pb_1.Message.getWrapperField(this, PacketMessage, 2) as PacketMessage;
        }
        set packet_message(value: PacketMessage) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_packet_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get eos() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set eos(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            has_message?: boolean;
            packet_message?: ReturnType<typeof PacketMessage.prototype.toObject>;
            eos?: boolean;
        }): RequestMessage {
            const message = new RequestMessage({});
            if (data.has_message != null) {
                message.has_message = data.has_message;
            }
            if (data.packet_message != null) {
                message.packet_message = PacketMessage.fromObject(data.packet_message);
            }
            if (data.eos != null) {
                message.eos = data.eos;
            }
            return message;
        }
        toObject() {
            const data: {
                has_message?: boolean;
                packet_message?: ReturnType<typeof PacketMessage.prototype.toObject>;
                eos?: boolean;
            } = {};
            if (this.has_message != null) {
                data.has_message = this.has_message;
            }
            if (this.packet_message != null) {
                data.packet_message = this.packet_message.toObject();
            }
            if (this.eos != null) {
                data.eos = this.eos;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message != false)
                writer.writeBool(1, this.has_message);
            if (this.has_packet_message)
                writer.writeMessage(2, this.packet_message, () => this.packet_message.serialize(writer));
            if (this.eos != false)
                writer.writeBool(3, this.eos);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.has_message = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.packet_message, () => message.packet_message = PacketMessage.deserialize(reader));
                        break;
                    case 3:
                        message.eos = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestMessage {
            return RequestMessage.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4]];
        constructor(data?: any[] | ({
            stream?: Stream;
        } & (({
            headers?: ResponseHeaders;
            message?: never;
            trailers?: never;
        } | {
            headers?: never;
            message?: ResponseMessage;
            trailers?: never;
        } | {
            headers?: never;
            message?: never;
            trailers?: ResponseTrailers;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stream" in data && data.stream != undefined) {
                    this.stream = data.stream;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("trailers" in data && data.trailers != undefined) {
                    this.trailers = data.trailers;
                }
            }
        }
        get stream() {
            return pb_1.Message.getWrapperField(this, Stream, 1) as Stream;
        }
        set stream(value: Stream) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_stream() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get headers() {
            return pb_1.Message.getWrapperField(this, ResponseHeaders, 2) as ResponseHeaders;
        }
        set headers(value: ResponseHeaders) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_headers() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get message() {
            return pb_1.Message.getWrapperField(this, ResponseMessage, 3) as ResponseMessage;
        }
        set message(value: ResponseMessage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get trailers() {
            return pb_1.Message.getWrapperField(this, ResponseTrailers, 4) as ResponseTrailers;
        }
        set trailers(value: ResponseTrailers) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_trailers() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "headers" | "message" | "trailers";
            } = {
                0: "none",
                2: "headers",
                3: "message",
                4: "trailers"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4])];
        }
        static fromObject(data: {
            stream?: ReturnType<typeof Stream.prototype.toObject>;
            headers?: ReturnType<typeof ResponseHeaders.prototype.toObject>;
            message?: ReturnType<typeof ResponseMessage.prototype.toObject>;
            trailers?: ReturnType<typeof ResponseTrailers.prototype.toObject>;
        }): Response {
            const message = new Response({});
            if (data.stream != null) {
                message.stream = Stream.fromObject(data.stream);
            }
            if (data.headers != null) {
                message.headers = ResponseHeaders.fromObject(data.headers);
            }
            if (data.message != null) {
                message.message = ResponseMessage.fromObject(data.message);
            }
            if (data.trailers != null) {
                message.trailers = ResponseTrailers.fromObject(data.trailers);
            }
            return message;
        }
        toObject() {
            const data: {
                stream?: ReturnType<typeof Stream.prototype.toObject>;
                headers?: ReturnType<typeof ResponseHeaders.prototype.toObject>;
                message?: ReturnType<typeof ResponseMessage.prototype.toObject>;
                trailers?: ReturnType<typeof ResponseTrailers.prototype.toObject>;
            } = {};
            if (this.stream != null) {
                data.stream = this.stream.toObject();
            }
            if (this.headers != null) {
                data.headers = this.headers.toObject();
            }
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.trailers != null) {
                data.trailers = this.trailers.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_stream)
                writer.writeMessage(1, this.stream, () => this.stream.serialize(writer));
            if (this.has_headers)
                writer.writeMessage(2, this.headers, () => this.headers.serialize(writer));
            if (this.has_message)
                writer.writeMessage(3, this.message, () => this.message.serialize(writer));
            if (this.has_trailers)
                writer.writeMessage(4, this.trailers, () => this.trailers.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stream, () => message.stream = Stream.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.headers, () => message.headers = ResponseHeaders.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.message, () => message.message = ResponseMessage.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.trailers, () => message.trailers = ResponseTrailers.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class ResponseHeaders extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            metadata?: Metadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 1) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
        }): ResponseHeaders {
            const message = new ResponseHeaders({});
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            } = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_metadata)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseHeaders {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseHeaders();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseHeaders {
            return ResponseHeaders.deserialize(bytes);
        }
    }
    export class ResponseMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            packet_message?: PacketMessage;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("packet_message" in data && data.packet_message != undefined) {
                    this.packet_message = data.packet_message;
                }
            }
        }
        get packet_message() {
            return pb_1.Message.getWrapperField(this, PacketMessage, 1) as PacketMessage;
        }
        set packet_message(value: PacketMessage) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_packet_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            packet_message?: ReturnType<typeof PacketMessage.prototype.toObject>;
        }): ResponseMessage {
            const message = new ResponseMessage({});
            if (data.packet_message != null) {
                message.packet_message = PacketMessage.fromObject(data.packet_message);
            }
            return message;
        }
        toObject() {
            const data: {
                packet_message?: ReturnType<typeof PacketMessage.prototype.toObject>;
            } = {};
            if (this.packet_message != null) {
                data.packet_message = this.packet_message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_packet_message)
                writer.writeMessage(1, this.packet_message, () => this.packet_message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.packet_message, () => message.packet_message = PacketMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseMessage {
            return ResponseMessage.deserialize(bytes);
        }
    }
    export class ResponseTrailers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: Status;
            metadata?: Metadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get status() {
            return pb_1.Message.getWrapperField(this, Status, 1) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 2) as Metadata;
        }
        set metadata(value: Metadata) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_metadata() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            status?: ReturnType<typeof Status.prototype.toObject>;
            metadata?: ReturnType<typeof Metadata.prototype.toObject>;
        }): ResponseTrailers {
            const message = new ResponseTrailers({});
            if (data.status != null) {
                message.status = Status.fromObject(data.status);
            }
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: ReturnType<typeof Status.prototype.toObject>;
                metadata?: ReturnType<typeof Metadata.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_status)
                writer.writeMessage(1, this.status, () => this.status.serialize(writer));
            if (this.has_metadata)
                writer.writeMessage(2, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResponseTrailers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResponseTrailers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.status, () => message.status = Status.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResponseTrailers {
            return ResponseTrailers.deserialize(bytes);
        }
    }
    export class Strings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set values(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: string[];
        }): Strings {
            const message = new Strings({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: string[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedString(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Strings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Strings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Strings {
            return Strings.deserialize(bytes);
        }
    }
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            md?: Map<string, Strings>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("md" in data && data.md != undefined) {
                    this.md = data.md;
                }
            }
            if (!this.md)
                this.md = new Map();
        }
        get md() {
            return pb_1.Message.getField(this, 1) as any as Map<string, Strings>;
        }
        set md(value: Map<string, Strings>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            md?: {
                [key: string]: ReturnType<typeof Strings.prototype.toObject>;
            };
        }): Metadata {
            const message = new Metadata({});
            if (typeof data.md == "object") {
                message.md = new Map(Object.entries(data.md).map(([key, value]) => [key, Strings.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                md?: {
                    [key: string]: ReturnType<typeof Strings.prototype.toObject>;
                };
            } = {};
            if (this.md != null) {
                data.md = (Object.fromEntries)((Array.from)(this.md).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.md) {
                writer.writeMessage(1, this.md, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.md as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Strings.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
}
