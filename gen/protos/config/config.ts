/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/config/config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./user_config";
import * as dependency_2 from "./plugin_config";
import * as dependency_3 from "./network_config";
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class Config extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_preferences?: dependency_1.zorro.UserConfig;
            plugin_config?: dependency_2.zorro.PluginConfig;
            network_config?: dependency_3.zorro.NetworkConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_preferences" in data && data.user_preferences != undefined) {
                    this.user_preferences = data.user_preferences;
                }
                if ("plugin_config" in data && data.plugin_config != undefined) {
                    this.plugin_config = data.plugin_config;
                }
                if ("network_config" in data && data.network_config != undefined) {
                    this.network_config = data.network_config;
                }
            }
        }
        get user_preferences() {
            return pb_1.Message.getWrapperField(this, dependency_1.zorro.UserConfig, 1) as dependency_1.zorro.UserConfig;
        }
        set user_preferences(value: dependency_1.zorro.UserConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user_preferences() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get plugin_config() {
            return pb_1.Message.getWrapperField(this, dependency_2.zorro.PluginConfig, 2) as dependency_2.zorro.PluginConfig;
        }
        set plugin_config(value: dependency_2.zorro.PluginConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_plugin_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get network_config() {
            return pb_1.Message.getWrapperField(this, dependency_3.zorro.NetworkConfig, 3) as dependency_3.zorro.NetworkConfig;
        }
        set network_config(value: dependency_3.zorro.NetworkConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_network_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            user_preferences?: ReturnType<typeof dependency_1.zorro.UserConfig.prototype.toObject>;
            plugin_config?: ReturnType<typeof dependency_2.zorro.PluginConfig.prototype.toObject>;
            network_config?: ReturnType<typeof dependency_3.zorro.NetworkConfig.prototype.toObject>;
        }): Config {
            const message = new Config({});
            if (data.user_preferences != null) {
                message.user_preferences = dependency_1.zorro.UserConfig.fromObject(data.user_preferences);
            }
            if (data.plugin_config != null) {
                message.plugin_config = dependency_2.zorro.PluginConfig.fromObject(data.plugin_config);
            }
            if (data.network_config != null) {
                message.network_config = dependency_3.zorro.NetworkConfig.fromObject(data.network_config);
            }
            return message;
        }
        toObject() {
            const data: {
                user_preferences?: ReturnType<typeof dependency_1.zorro.UserConfig.prototype.toObject>;
                plugin_config?: ReturnType<typeof dependency_2.zorro.PluginConfig.prototype.toObject>;
                network_config?: ReturnType<typeof dependency_3.zorro.NetworkConfig.prototype.toObject>;
            } = {};
            if (this.user_preferences != null) {
                data.user_preferences = this.user_preferences.toObject();
            }
            if (this.plugin_config != null) {
                data.plugin_config = this.plugin_config.toObject();
            }
            if (this.network_config != null) {
                data.network_config = this.network_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_preferences)
                writer.writeMessage(1, this.user_preferences, () => this.user_preferences.serialize(writer));
            if (this.has_plugin_config)
                writer.writeMessage(2, this.plugin_config, () => this.plugin_config.serialize(writer));
            if (this.has_network_config)
                writer.writeMessage(3, this.network_config, () => this.network_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Config {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Config();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user_preferences, () => message.user_preferences = dependency_1.zorro.UserConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.plugin_config, () => message.plugin_config = dependency_2.zorro.PluginConfig.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.network_config, () => message.network_config = dependency_3.zorro.NetworkConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Config {
            return Config.deserialize(bytes);
        }
    }
}
