/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/config/network_config.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class NetworkConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            GRPC_port?: number;
            GRPC_host?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("GRPC_port" in data && data.GRPC_port != undefined) {
                    this.GRPC_port = data.GRPC_port;
                }
                if ("GRPC_host" in data && data.GRPC_host != undefined) {
                    this.GRPC_host = data.GRPC_host;
                }
            }
        }
        get GRPC_port() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set GRPC_port(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get GRPC_host() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set GRPC_host(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            GRPC_port?: number;
            GRPC_host?: string;
        }): NetworkConfig {
            const message = new NetworkConfig({});
            if (data.GRPC_port != null) {
                message.GRPC_port = data.GRPC_port;
            }
            if (data.GRPC_host != null) {
                message.GRPC_host = data.GRPC_host;
            }
            return message;
        }
        toObject() {
            const data: {
                GRPC_port?: number;
                GRPC_host?: string;
            } = {};
            if (this.GRPC_port != null) {
                data.GRPC_port = this.GRPC_port;
            }
            if (this.GRPC_host != null) {
                data.GRPC_host = this.GRPC_host;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.GRPC_port != 0)
                writer.writeInt32(1, this.GRPC_port);
            if (this.GRPC_host.length)
                writer.writeString(2, this.GRPC_host);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetworkConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetworkConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.GRPC_port = reader.readInt32();
                        break;
                    case 2:
                        message.GRPC_host = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NetworkConfig {
            return NetworkConfig.deserialize(bytes);
        }
    }
}
