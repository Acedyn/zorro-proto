// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.2
// source: protos/scheduling/webworker_protocol.proto

package scheduling

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Packets that defines the communication protocol between two processes
type IpcPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PacketType:
	//
	//	*IpcPacket_InitPacket
	//	*IpcPacket_SdpExchange
	//	*IpcPacket_WrtcForward
	PacketType isIpcPacket_PacketType `protobuf_oneof:"packetType"`
}

func (x *IpcPacket) Reset() {
	*x = IpcPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpcPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpcPacket) ProtoMessage() {}

func (x *IpcPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpcPacket.ProtoReflect.Descriptor instead.
func (*IpcPacket) Descriptor() ([]byte, []int) {
	return file_protos_scheduling_webworker_protocol_proto_rawDescGZIP(), []int{0}
}

func (m *IpcPacket) GetPacketType() isIpcPacket_PacketType {
	if m != nil {
		return m.PacketType
	}
	return nil
}

func (x *IpcPacket) GetInitPacket() *InitPacket {
	if x, ok := x.GetPacketType().(*IpcPacket_InitPacket); ok {
		return x.InitPacket
	}
	return nil
}

func (x *IpcPacket) GetSdpExchange() *SdpExchange {
	if x, ok := x.GetPacketType().(*IpcPacket_SdpExchange); ok {
		return x.SdpExchange
	}
	return nil
}

func (x *IpcPacket) GetWrtcForward() *WrtcForward {
	if x, ok := x.GetPacketType().(*IpcPacket_WrtcForward); ok {
		return x.WrtcForward
	}
	return nil
}

type isIpcPacket_PacketType interface {
	isIpcPacket_PacketType()
}

type IpcPacket_InitPacket struct {
	InitPacket *InitPacket `protobuf:"bytes,1,opt,name=initPacket,proto3,oneof"`
}

type IpcPacket_SdpExchange struct {
	SdpExchange *SdpExchange `protobuf:"bytes,2,opt,name=sdpExchange,proto3,oneof"`
}

type IpcPacket_WrtcForward struct {
	WrtcForward *WrtcForward `protobuf:"bytes,3,opt,name=wrtcForward,proto3,oneof"`
}

func (*IpcPacket_InitPacket) isIpcPacket_PacketType() {}

func (*IpcPacket_SdpExchange) isIpcPacket_PacketType() {}

func (*IpcPacket_WrtcForward) isIpcPacket_PacketType() {}

// Initialize the communication between the two processes
type InitPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitPacket) Reset() {
	*x = InitPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPacket) ProtoMessage() {}

func (x *InitPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPacket.ProtoReflect.Descriptor instead.
func (*InitPacket) Descriptor() ([]byte, []int) {
	return file_protos_scheduling_webworker_protocol_proto_rawDescGZIP(), []int{1}
}

// Send a SDP offer or answer as a json encoded string
type SdpExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sdp:
	//
	//	*SdpExchange_Offer
	//	*SdpExchange_Answer
	Sdp isSdpExchange_Sdp `protobuf_oneof:"sdp"`
}

func (x *SdpExchange) Reset() {
	*x = SdpExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdpExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdpExchange) ProtoMessage() {}

func (x *SdpExchange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdpExchange.ProtoReflect.Descriptor instead.
func (*SdpExchange) Descriptor() ([]byte, []int) {
	return file_protos_scheduling_webworker_protocol_proto_rawDescGZIP(), []int{2}
}

func (m *SdpExchange) GetSdp() isSdpExchange_Sdp {
	if m != nil {
		return m.Sdp
	}
	return nil
}

func (x *SdpExchange) GetOffer() string {
	if x, ok := x.GetSdp().(*SdpExchange_Offer); ok {
		return x.Offer
	}
	return ""
}

func (x *SdpExchange) GetAnswer() string {
	if x, ok := x.GetSdp().(*SdpExchange_Answer); ok {
		return x.Answer
	}
	return ""
}

type isSdpExchange_Sdp interface {
	isSdpExchange_Sdp()
}

type SdpExchange_Offer struct {
	Offer string `protobuf:"bytes,1,opt,name=offer,proto3,oneof"`
}

type SdpExchange_Answer struct {
	Answer string `protobuf:"bytes,2,opt,name=answer,proto3,oneof"`
}

func (*SdpExchange_Offer) isSdpExchange_Sdp() {}

func (*SdpExchange_Answer) isSdpExchange_Sdp() {}

// Forward data to be sent or received via wrtc
type WrtcForward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WrtcForward) Reset() {
	*x = WrtcForward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrtcForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrtcForward) ProtoMessage() {}

func (x *WrtcForward) ProtoReflect() protoreflect.Message {
	mi := &file_protos_scheduling_webworker_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrtcForward.ProtoReflect.Descriptor instead.
func (*WrtcForward) Descriptor() ([]byte, []int) {
	return file_protos_scheduling_webworker_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *WrtcForward) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_protos_scheduling_webworker_protocol_proto protoreflect.FileDescriptor

var file_protos_scheduling_webworker_protocol_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x77, 0x65, 0x62, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x7a, 0x6f,
	0x72, 0x72, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x09, 0x49, 0x70, 0x63, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x7a, 0x6f, 0x72, 0x72, 0x6f, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x64, 0x70, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x6f,
	0x72, 0x72, 0x6f, 0x2e, 0x53, 0x64, 0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x64, 0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x77, 0x72, 0x74, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x6f, 0x72, 0x72, 0x6f, 0x2e, 0x57, 0x72, 0x74, 0x63,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x72, 0x74, 0x63, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x22, 0x46, 0x0a, 0x0b, 0x53, 0x64, 0x70, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x22, 0x21, 0x0a, 0x0b, 0x57, 0x72,
	0x74, 0x63, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x35, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x63, 0x65, 0x64,
	0x79, 0x6e, 0x2f, 0x7a, 0x6f, 0x72, 0x72, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_scheduling_webworker_protocol_proto_rawDescOnce sync.Once
	file_protos_scheduling_webworker_protocol_proto_rawDescData = file_protos_scheduling_webworker_protocol_proto_rawDesc
)

func file_protos_scheduling_webworker_protocol_proto_rawDescGZIP() []byte {
	file_protos_scheduling_webworker_protocol_proto_rawDescOnce.Do(func() {
		file_protos_scheduling_webworker_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_scheduling_webworker_protocol_proto_rawDescData)
	})
	return file_protos_scheduling_webworker_protocol_proto_rawDescData
}

var file_protos_scheduling_webworker_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_protos_scheduling_webworker_protocol_proto_goTypes = []interface{}{
	(*IpcPacket)(nil),   // 0: zorro.IpcPacket
	(*InitPacket)(nil),  // 1: zorro.InitPacket
	(*SdpExchange)(nil), // 2: zorro.SdpExchange
	(*WrtcForward)(nil), // 3: zorro.WrtcForward
}
var file_protos_scheduling_webworker_protocol_proto_depIdxs = []int32{
	1, // 0: zorro.IpcPacket.initPacket:type_name -> zorro.InitPacket
	2, // 1: zorro.IpcPacket.sdpExchange:type_name -> zorro.SdpExchange
	3, // 2: zorro.IpcPacket.wrtcForward:type_name -> zorro.WrtcForward
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_protos_scheduling_webworker_protocol_proto_init() }
func file_protos_scheduling_webworker_protocol_proto_init() {
	if File_protos_scheduling_webworker_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_scheduling_webworker_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpcPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_scheduling_webworker_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_scheduling_webworker_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdpExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_scheduling_webworker_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrtcForward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_scheduling_webworker_protocol_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IpcPacket_InitPacket)(nil),
		(*IpcPacket_SdpExchange)(nil),
		(*IpcPacket_WrtcForward)(nil),
	}
	file_protos_scheduling_webworker_protocol_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SdpExchange_Offer)(nil),
		(*SdpExchange_Answer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_scheduling_webworker_protocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_scheduling_webworker_protocol_proto_goTypes,
		DependencyIndexes: file_protos_scheduling_webworker_protocol_proto_depIdxs,
		MessageInfos:      file_protos_scheduling_webworker_protocol_proto_msgTypes,
	}.Build()
	File_protos_scheduling_webworker_protocol_proto = out.File
	file_protos_scheduling_webworker_protocol_proto_rawDesc = nil
	file_protos_scheduling_webworker_protocol_proto_goTypes = nil
	file_protos_scheduling_webworker_protocol_proto_depIdxs = nil
}
