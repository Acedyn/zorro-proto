// source: protos/scheduling/webworker_protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.zorro.InitPacket', null, global);
goog.exportSymbol('proto.zorro.IpcPacket', null, global);
goog.exportSymbol('proto.zorro.IpcPacket.PackettypeCase', null, global);
goog.exportSymbol('proto.zorro.SdpExchange', null, global);
goog.exportSymbol('proto.zorro.SdpExchange.SdpCase', null, global);
goog.exportSymbol('proto.zorro.WrtcForward', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zorro.IpcPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zorro.IpcPacket.oneofGroups_);
};
goog.inherits(proto.zorro.IpcPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zorro.IpcPacket.displayName = 'proto.zorro.IpcPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zorro.InitPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zorro.InitPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zorro.InitPacket.displayName = 'proto.zorro.InitPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zorro.SdpExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.zorro.SdpExchange.oneofGroups_);
};
goog.inherits(proto.zorro.SdpExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zorro.SdpExchange.displayName = 'proto.zorro.SdpExchange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.zorro.WrtcForward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.zorro.WrtcForward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.zorro.WrtcForward.displayName = 'proto.zorro.WrtcForward';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zorro.IpcPacket.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.zorro.IpcPacket.PackettypeCase = {
  PACKETTYPE_NOT_SET: 0,
  INITPACKET: 1,
  SDPEXCHANGE: 2,
  WRTCFORWARD: 3
};

/**
 * @return {proto.zorro.IpcPacket.PackettypeCase}
 */
proto.zorro.IpcPacket.prototype.getPackettypeCase = function() {
  return /** @type {proto.zorro.IpcPacket.PackettypeCase} */(jspb.Message.computeOneofCase(this, proto.zorro.IpcPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zorro.IpcPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.zorro.IpcPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zorro.IpcPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.IpcPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    initpacket: (f = msg.getInitpacket()) && proto.zorro.InitPacket.toObject(includeInstance, f),
    sdpexchange: (f = msg.getSdpexchange()) && proto.zorro.SdpExchange.toObject(includeInstance, f),
    wrtcforward: (f = msg.getWrtcforward()) && proto.zorro.WrtcForward.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zorro.IpcPacket}
 */
proto.zorro.IpcPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zorro.IpcPacket;
  return proto.zorro.IpcPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zorro.IpcPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zorro.IpcPacket}
 */
proto.zorro.IpcPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.zorro.InitPacket;
      reader.readMessage(value,proto.zorro.InitPacket.deserializeBinaryFromReader);
      msg.setInitpacket(value);
      break;
    case 2:
      var value = new proto.zorro.SdpExchange;
      reader.readMessage(value,proto.zorro.SdpExchange.deserializeBinaryFromReader);
      msg.setSdpexchange(value);
      break;
    case 3:
      var value = new proto.zorro.WrtcForward;
      reader.readMessage(value,proto.zorro.WrtcForward.deserializeBinaryFromReader);
      msg.setWrtcforward(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zorro.IpcPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zorro.IpcPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zorro.IpcPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.IpcPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitpacket();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.zorro.InitPacket.serializeBinaryToWriter
    );
  }
  f = message.getSdpexchange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.zorro.SdpExchange.serializeBinaryToWriter
    );
  }
  f = message.getWrtcforward();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.zorro.WrtcForward.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitPacket initPacket = 1;
 * @return {?proto.zorro.InitPacket}
 */
proto.zorro.IpcPacket.prototype.getInitpacket = function() {
  return /** @type{?proto.zorro.InitPacket} */ (
    jspb.Message.getWrapperField(this, proto.zorro.InitPacket, 1));
};


/**
 * @param {?proto.zorro.InitPacket|undefined} value
 * @return {!proto.zorro.IpcPacket} returns this
*/
proto.zorro.IpcPacket.prototype.setInitpacket = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.zorro.IpcPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zorro.IpcPacket} returns this
 */
proto.zorro.IpcPacket.prototype.clearInitpacket = function() {
  return this.setInitpacket(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zorro.IpcPacket.prototype.hasInitpacket = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SdpExchange sdpExchange = 2;
 * @return {?proto.zorro.SdpExchange}
 */
proto.zorro.IpcPacket.prototype.getSdpexchange = function() {
  return /** @type{?proto.zorro.SdpExchange} */ (
    jspb.Message.getWrapperField(this, proto.zorro.SdpExchange, 2));
};


/**
 * @param {?proto.zorro.SdpExchange|undefined} value
 * @return {!proto.zorro.IpcPacket} returns this
*/
proto.zorro.IpcPacket.prototype.setSdpexchange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.zorro.IpcPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zorro.IpcPacket} returns this
 */
proto.zorro.IpcPacket.prototype.clearSdpexchange = function() {
  return this.setSdpexchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zorro.IpcPacket.prototype.hasSdpexchange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WrtcForward wrtcForward = 3;
 * @return {?proto.zorro.WrtcForward}
 */
proto.zorro.IpcPacket.prototype.getWrtcforward = function() {
  return /** @type{?proto.zorro.WrtcForward} */ (
    jspb.Message.getWrapperField(this, proto.zorro.WrtcForward, 3));
};


/**
 * @param {?proto.zorro.WrtcForward|undefined} value
 * @return {!proto.zorro.IpcPacket} returns this
*/
proto.zorro.IpcPacket.prototype.setWrtcforward = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.zorro.IpcPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.zorro.IpcPacket} returns this
 */
proto.zorro.IpcPacket.prototype.clearWrtcforward = function() {
  return this.setWrtcforward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zorro.IpcPacket.prototype.hasWrtcforward = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zorro.InitPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.zorro.InitPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zorro.InitPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.InitPacket.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zorro.InitPacket}
 */
proto.zorro.InitPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zorro.InitPacket;
  return proto.zorro.InitPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zorro.InitPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zorro.InitPacket}
 */
proto.zorro.InitPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zorro.InitPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zorro.InitPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zorro.InitPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.InitPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.zorro.SdpExchange.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.zorro.SdpExchange.SdpCase = {
  SDP_NOT_SET: 0,
  OFFER: 1,
  ANSWER: 2
};

/**
 * @return {proto.zorro.SdpExchange.SdpCase}
 */
proto.zorro.SdpExchange.prototype.getSdpCase = function() {
  return /** @type {proto.zorro.SdpExchange.SdpCase} */(jspb.Message.computeOneofCase(this, proto.zorro.SdpExchange.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zorro.SdpExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.zorro.SdpExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zorro.SdpExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.SdpExchange.toObject = function(includeInstance, msg) {
  var f, obj = {
    offer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zorro.SdpExchange}
 */
proto.zorro.SdpExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zorro.SdpExchange;
  return proto.zorro.SdpExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zorro.SdpExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zorro.SdpExchange}
 */
proto.zorro.SdpExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zorro.SdpExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zorro.SdpExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zorro.SdpExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.SdpExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string offer = 1;
 * @return {string}
 */
proto.zorro.SdpExchange.prototype.getOffer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.zorro.SdpExchange} returns this
 */
proto.zorro.SdpExchange.prototype.setOffer = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.zorro.SdpExchange.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.zorro.SdpExchange} returns this
 */
proto.zorro.SdpExchange.prototype.clearOffer = function() {
  return jspb.Message.setOneofField(this, 1, proto.zorro.SdpExchange.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zorro.SdpExchange.prototype.hasOffer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.zorro.SdpExchange.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.zorro.SdpExchange} returns this
 */
proto.zorro.SdpExchange.prototype.setAnswer = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.zorro.SdpExchange.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.zorro.SdpExchange} returns this
 */
proto.zorro.SdpExchange.prototype.clearAnswer = function() {
  return jspb.Message.setOneofField(this, 2, proto.zorro.SdpExchange.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.zorro.SdpExchange.prototype.hasAnswer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.zorro.WrtcForward.prototype.toObject = function(opt_includeInstance) {
  return proto.zorro.WrtcForward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.zorro.WrtcForward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.WrtcForward.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.zorro.WrtcForward}
 */
proto.zorro.WrtcForward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.zorro.WrtcForward;
  return proto.zorro.WrtcForward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.zorro.WrtcForward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.zorro.WrtcForward}
 */
proto.zorro.WrtcForward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.zorro.WrtcForward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.zorro.WrtcForward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.zorro.WrtcForward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.zorro.WrtcForward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.zorro.WrtcForward.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.zorro.WrtcForward.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.zorro.WrtcForward.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.zorro.WrtcForward} returns this
 */
proto.zorro.WrtcForward.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.zorro);
