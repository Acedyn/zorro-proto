/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/scheduling/processor.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./processor_status";
import * as dependency_2 from "./..\\filesystem\\fs";
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class ProcessorPath extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            file_system?: dependency_2.zorro.FileSystemSettings;
            start_program_template?: string;
            start_processor_template?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file_system" in data && data.file_system != undefined) {
                    this.file_system = data.file_system;
                }
                if ("start_program_template" in data && data.start_program_template != undefined) {
                    this.start_program_template = data.start_program_template;
                }
                if ("start_processor_template" in data && data.start_processor_template != undefined) {
                    this.start_processor_template = data.start_processor_template;
                }
            }
        }
        get file_system() {
            return pb_1.Message.getWrapperField(this, dependency_2.zorro.FileSystemSettings, 1) as dependency_2.zorro.FileSystemSettings;
        }
        set file_system(value: dependency_2.zorro.FileSystemSettings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_file_system() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get start_program_template() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set start_program_template(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get start_processor_template() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set start_processor_template(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            file_system?: ReturnType<typeof dependency_2.zorro.FileSystemSettings.prototype.toObject>;
            start_program_template?: string;
            start_processor_template?: string;
        }): ProcessorPath {
            const message = new ProcessorPath({});
            if (data.file_system != null) {
                message.file_system = dependency_2.zorro.FileSystemSettings.fromObject(data.file_system);
            }
            if (data.start_program_template != null) {
                message.start_program_template = data.start_program_template;
            }
            if (data.start_processor_template != null) {
                message.start_processor_template = data.start_processor_template;
            }
            return message;
        }
        toObject() {
            const data: {
                file_system?: ReturnType<typeof dependency_2.zorro.FileSystemSettings.prototype.toObject>;
                start_program_template?: string;
                start_processor_template?: string;
            } = {};
            if (this.file_system != null) {
                data.file_system = this.file_system.toObject();
            }
            if (this.start_program_template != null) {
                data.start_program_template = this.start_program_template;
            }
            if (this.start_processor_template != null) {
                data.start_processor_template = this.start_processor_template;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_file_system)
                writer.writeMessage(1, this.file_system, () => this.file_system.serialize(writer));
            if (this.start_program_template.length)
                writer.writeString(2, this.start_program_template);
            if (this.start_processor_template.length)
                writer.writeString(3, this.start_processor_template);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessorPath {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessorPath();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.file_system, () => message.file_system = dependency_2.zorro.FileSystemSettings.deserialize(reader));
                        break;
                    case 2:
                        message.start_program_template = reader.readString();
                        break;
                    case 3:
                        message.start_processor_template = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessorPath {
            return ProcessorPath.deserialize(bytes);
        }
    }
    export class Processor extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            version?: string;
            label?: string;
            subsets?: string[];
            paths?: ProcessorPath[];
            status?: dependency_1.zorro.ProcessorStatus;
            metadata?: Map<string, string>;
            stdout?: Map<number, string>;
            stderr?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("subsets" in data && data.subsets != undefined) {
                    this.subsets = data.subsets;
                }
                if ("paths" in data && data.paths != undefined) {
                    this.paths = data.paths;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("stdout" in data && data.stdout != undefined) {
                    this.stdout = data.stdout;
                }
                if ("stderr" in data && data.stderr != undefined) {
                    this.stderr = data.stderr;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
            if (!this.stdout)
                this.stdout = new Map();
            if (!this.stderr)
                this.stderr = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get subsets() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set subsets(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get paths() {
            return pb_1.Message.getRepeatedWrapperField(this, ProcessorPath, 6) as ProcessorPath[];
        }
        set paths(value: ProcessorPath[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, dependency_1.zorro.ProcessorStatus.STARTING) as dependency_1.zorro.ProcessorStatus;
        }
        set status(value: dependency_1.zorro.ProcessorStatus) {
            pb_1.Message.setField(this, 7, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 8) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 8, value as any);
        }
        get stdout() {
            return pb_1.Message.getField(this, 9) as any as Map<number, string>;
        }
        set stdout(value: Map<number, string>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        get stderr() {
            return pb_1.Message.getField(this, 10) as any as Map<number, string>;
        }
        set stderr(value: Map<number, string>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            version?: string;
            label?: string;
            subsets?: string[];
            paths?: ReturnType<typeof ProcessorPath.prototype.toObject>[];
            status?: dependency_1.zorro.ProcessorStatus;
            metadata?: {
                [key: string]: string;
            };
            stdout?: {
                [key: number]: string;
            };
            stderr?: {
                [key: number]: string;
            };
        }): Processor {
            const message = new Processor({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.subsets != null) {
                message.subsets = data.subsets;
            }
            if (data.paths != null) {
                message.paths = data.paths.map(item => ProcessorPath.fromObject(item));
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            if (typeof data.stdout == "object") {
                message.stdout = new Map(Object.entries(data.stdout).map(([key, value]) => [Number(key), value]));
            }
            if (typeof data.stderr == "object") {
                message.stderr = new Map(Object.entries(data.stderr).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                version?: string;
                label?: string;
                subsets?: string[];
                paths?: ReturnType<typeof ProcessorPath.prototype.toObject>[];
                status?: dependency_1.zorro.ProcessorStatus;
                metadata?: {
                    [key: string]: string;
                };
                stdout?: {
                    [key: number]: string;
                };
                stderr?: {
                    [key: number]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.subsets != null) {
                data.subsets = this.subsets;
            }
            if (this.paths != null) {
                data.paths = this.paths.map((item: ProcessorPath) => item.toObject());
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            if (this.stdout != null) {
                data.stdout = (Object.fromEntries)(this.stdout);
            }
            if (this.stderr != null) {
                data.stderr = (Object.fromEntries)(this.stderr);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.version.length)
                writer.writeString(3, this.version);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.subsets.length)
                writer.writeRepeatedString(5, this.subsets);
            if (this.paths.length)
                writer.writeRepeatedMessage(6, this.paths, (item: ProcessorPath) => item.serialize(writer));
            if (this.status != dependency_1.zorro.ProcessorStatus.STARTING)
                writer.writeEnum(7, this.status);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(8, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.stdout) {
                writer.writeMessage(9, this.stdout, () => {
                    writer.writeInt64(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.stderr) {
                writer.writeMessage(10, this.stderr, () => {
                    writer.writeInt64(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Processor {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Processor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        reader.readMessage(message.paths, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ProcessorPath.deserialize(reader), ProcessorPath));
                        break;
                    case 7:
                        message.status = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stdout as any, reader, reader.readInt64, reader.readString));
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stderr as any, reader, reader.readInt64, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Processor {
            return Processor.deserialize(bytes);
        }
    }
}
