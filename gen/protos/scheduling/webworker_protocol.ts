/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/scheduling/webworker_protocol.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class IpcPacket extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            initPacket?: InitPacket;
            sdpExchange?: never;
            wrtcForward?: never;
        } | {
            initPacket?: never;
            sdpExchange?: SdpExchange;
            wrtcForward?: never;
        } | {
            initPacket?: never;
            sdpExchange?: never;
            wrtcForward?: WrtcForward;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("initPacket" in data && data.initPacket != undefined) {
                    this.initPacket = data.initPacket;
                }
                if ("sdpExchange" in data && data.sdpExchange != undefined) {
                    this.sdpExchange = data.sdpExchange;
                }
                if ("wrtcForward" in data && data.wrtcForward != undefined) {
                    this.wrtcForward = data.wrtcForward;
                }
            }
        }
        get initPacket() {
            return pb_1.Message.getWrapperField(this, InitPacket, 1) as InitPacket;
        }
        set initPacket(value: InitPacket) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_initPacket() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sdpExchange() {
            return pb_1.Message.getWrapperField(this, SdpExchange, 2) as SdpExchange;
        }
        set sdpExchange(value: SdpExchange) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_sdpExchange() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get wrtcForward() {
            return pb_1.Message.getWrapperField(this, WrtcForward, 3) as WrtcForward;
        }
        set wrtcForward(value: WrtcForward) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_wrtcForward() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get packetType() {
            const cases: {
                [index: number]: "none" | "initPacket" | "sdpExchange" | "wrtcForward";
            } = {
                0: "none",
                1: "initPacket",
                2: "sdpExchange",
                3: "wrtcForward"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            initPacket?: ReturnType<typeof InitPacket.prototype.toObject>;
            sdpExchange?: ReturnType<typeof SdpExchange.prototype.toObject>;
            wrtcForward?: ReturnType<typeof WrtcForward.prototype.toObject>;
        }): IpcPacket {
            const message = new IpcPacket({});
            if (data.initPacket != null) {
                message.initPacket = InitPacket.fromObject(data.initPacket);
            }
            if (data.sdpExchange != null) {
                message.sdpExchange = SdpExchange.fromObject(data.sdpExchange);
            }
            if (data.wrtcForward != null) {
                message.wrtcForward = WrtcForward.fromObject(data.wrtcForward);
            }
            return message;
        }
        toObject() {
            const data: {
                initPacket?: ReturnType<typeof InitPacket.prototype.toObject>;
                sdpExchange?: ReturnType<typeof SdpExchange.prototype.toObject>;
                wrtcForward?: ReturnType<typeof WrtcForward.prototype.toObject>;
            } = {};
            if (this.initPacket != null) {
                data.initPacket = this.initPacket.toObject();
            }
            if (this.sdpExchange != null) {
                data.sdpExchange = this.sdpExchange.toObject();
            }
            if (this.wrtcForward != null) {
                data.wrtcForward = this.wrtcForward.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_initPacket)
                writer.writeMessage(1, this.initPacket, () => this.initPacket.serialize(writer));
            if (this.has_sdpExchange)
                writer.writeMessage(2, this.sdpExchange, () => this.sdpExchange.serialize(writer));
            if (this.has_wrtcForward)
                writer.writeMessage(3, this.wrtcForward, () => this.wrtcForward.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IpcPacket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IpcPacket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.initPacket, () => message.initPacket = InitPacket.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sdpExchange, () => message.sdpExchange = SdpExchange.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.wrtcForward, () => message.wrtcForward = WrtcForward.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IpcPacket {
            return IpcPacket.deserialize(bytes);
        }
    }
    export class InitPacket extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): InitPacket {
            const message = new InitPacket({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitPacket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitPacket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitPacket {
            return InitPacket.deserialize(bytes);
        }
    }
    export class SdpExchange extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            offer?: string;
            answer?: never;
        } | {
            offer?: never;
            answer?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offer" in data && data.offer != undefined) {
                    this.offer = data.offer;
                }
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
            }
        }
        get offer() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set offer(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_offer() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get answer() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set answer(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_answer() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sdp() {
            const cases: {
                [index: number]: "none" | "offer" | "answer";
            } = {
                0: "none",
                1: "offer",
                2: "answer"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            offer?: string;
            answer?: string;
        }): SdpExchange {
            const message = new SdpExchange({});
            if (data.offer != null) {
                message.offer = data.offer;
            }
            if (data.answer != null) {
                message.answer = data.answer;
            }
            return message;
        }
        toObject() {
            const data: {
                offer?: string;
                answer?: string;
            } = {};
            if (this.offer != null) {
                data.offer = this.offer;
            }
            if (this.answer != null) {
                data.answer = this.answer;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_offer)
                writer.writeString(1, this.offer);
            if (this.has_answer)
                writer.writeString(2, this.answer);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SdpExchange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SdpExchange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offer = reader.readString();
                        break;
                    case 2:
                        message.answer = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SdpExchange {
            return SdpExchange.deserialize(bytes);
        }
    }
    export class WrtcForward extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): WrtcForward {
            const message = new WrtcForward({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WrtcForward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WrtcForward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WrtcForward {
            return WrtcForward.deserialize(bytes);
        }
    }
}
