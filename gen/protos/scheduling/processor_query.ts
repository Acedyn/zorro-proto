/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.2
 * source: protos/scheduling/processor_query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace zorro {
    export class ProcessorQuery extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [4]];
        constructor(data?: any[] | ({
            metadata?: Map<string, string>;
        } & (({
            name?: string;
        }) | ({
            version?: string;
        }) | ({
            id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get metadata() {
            return pb_1.Message.getField(this, 5) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                1: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _version() {
            const cases: {
                [index: number]: "none" | "version";
            } = {
                0: "none",
                2: "version"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _id() {
            const cases: {
                [index: number]: "none" | "id";
            } = {
                0: "none",
                4: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            name?: string;
            version?: string;
            id?: string;
            metadata?: {
                [key: string]: string;
            };
        }): ProcessorQuery {
            const message = new ProcessorQuery({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                version?: string;
                id?: string;
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeString(1, this.name);
            if (this.has_version)
                writer.writeString(2, this.version);
            if (this.has_id)
                writer.writeString(4, this.id);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(5, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProcessorQuery {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProcessorQuery();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProcessorQuery {
            return ProcessorQuery.deserialize(bytes);
        }
    }
}
